@inherits UmbracoViewPage<IEnumerable<AuditableDataType>>
@*
	Expected View Data:
	-------------------
	StandardInfo (object - StandardViewInfo)		: Version, Current environment, etc.
	Status (object - StatusMessage)					: Status of operations

*@
@{
	Layout = "_Master.cshtml";
	var paramStandardInfo = Mvc.GetSafeViewData(ViewData, "StandardInfo", new StandardViewInfo()) as StandardViewInfo;
	var paramStatus = Mvc.GetSafeViewData(ViewData, "Status", new StatusMessage()) as StatusMessage;

	IEnumerable<AuditableDataType> dataTypes = Model;
	//var propertyAlias = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "PropertyAlias");
	// var includeUnpublished = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataBool(ViewData, "IncludeUnpublished");

	var counter = 0;
	var Title = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "Title", "All DataTypes");
}

@section Head {
	<title>@Title</title>
}

<!--AllDataTypesAsHtmlTable-->

<h1>@Title</h1>
<p>Total DataTypes Returned: @dataTypes.Count()</p>

<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width:100%">
	<thead>
		<tr>
			<th>#</th>
			<th>Actions</th>
			<th>DataType Name</th>
			<th>Folder Path</th>
			<th>Property Editor Alias</th>
			<th>Configuration</th>
			<th>Uses Content Types (All)</th>
			<th>Used On Properties</th>
			<th>Qty of Properties</th>
			<th>Id</th>
			<th>Guid Key</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var dt in dataTypes)
		{
			counter++;

			<tr>
				@*// #*@
				<td>@counter</td>

				@*//Actions*@
				<td>
					@{
						Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/RazorViews/DataFormats/SchemaActions.cshtml", dt.Id, new ViewDataDictionary(ViewData)
				{
				{"EntityType", "DataType" }
				});
					}
				</td>

				@*//Name*@
				<td>@dt.Name</td>

				@*//Path*@
				<td>@dt.PathAsText</td>

				@*//Property Editor Alias*@
				<td>@dt.EditorAlias</td>

				@*//Configuration*@
				<td>@dt.ConfigurationJson.Replace(",", ", ")</td>

				@* //Uses Content Types *@
				@if (dt.UsesElementsAll.Any())
				{
					<td>@Html.Raw(string.Join(" <br/> ", dt.UsesElementsAll.Select(n => $"{n}")))</td>
				}
				else
				{
					<td>~NONE~</td>
				}

				@*//Used On Properties*@
				@if (dt.UsedOnProperties.Any())
				{
					<td>@Html.Raw(string.Join(" <br/> ", dt.UsedOnProperties.Select(n => $"{n.Value} [{n.Key.Alias}]")))</td>
				}
				else
				{
					<td>~NONE~</td>
				}

				@*//Qty of Properties*@
				<td>@dt.UsedOnProperties.Count()</td>

				@*// ID*@
				<td>@dt.Id</td>

				@*// GUID*@
				<td>@dt.Guid.ToString()</td>
			</tr>
		}

	</tbody>
	<tfoot>
		<tr>
			<td>#</td>
			<td>Actions</td>
			<th>DataType Name</th>
			<th>Folder Path</th>
			<th>Property Editor Alias</th>
			<th>Configuration</th>
			<th>Uses Content Types</th>
			<th>Used On Properties</th>
			<th>Qty of Properties</th>
			<th>Id</th>
			<th>Guid Key</th>
		</tr>
	</tfoot>
</table>
