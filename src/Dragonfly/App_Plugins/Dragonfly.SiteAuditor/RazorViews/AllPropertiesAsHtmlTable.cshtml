@inherits UmbracoViewPage<IEnumerable<AuditableProperty>>
@*
	Expected View Data:
	-------------------
	StandardInfo (object - StandardViewInfo)		: Version, Current environment, etc.
	Status (object - StatusMessage)					: Status of operations
	DocTypeAlias (string)							: Alias of the Document Type, if it is filtered, otherwise for all it will be an empty string

*@
@{
	Layout = "_Master.cshtml";
	var paramStandardInfo = Mvc.GetSafeViewData(ViewData, "StandardInfo", new StandardViewInfo()) as StandardViewInfo;
	var paramStatus = Mvc.GetSafeViewData(ViewData, "Status", new StatusMessage()) as StatusMessage;
	var paramDocTypeAlias = Mvc.GetSafeViewDataString(ViewData, "DocTypeAlias", "");
	var isFilteredByDoctype = paramDocTypeAlias != "";

	IEnumerable<AuditableProperty> propsList = Model.ToList();
	var Title = Mvc.GetSafeViewDataString(ViewData, "Title", "All Properties");

	@* var fancyFormat = true;
		var propertyAlias = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "PropertyAlias");
		var includeUnpublished = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataBool(ViewData, "IncludeUnpublished");
	*@
	var counter = 0;
}
@section Head {
	<title>@Title</title>
}
<!--AllPropertiesAsHtmlTable-->
<h1>@Title</h1>
<p>Total Returned: @propsList.Count()</p>

<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width: 100%;">
	<thead>
		<tr>
			<th>#</th>
			<th>Property Name</th>
			<th>Property Alias</th>
			<th>Composition</th>
			<th>Group</th>
			<th>DataType Name</th>
			<th>DataType Property Editor</th>
			<th>DataType Database Type</th>
			@if (!isFilteredByDoctype)
			{
				<th>Qty of DocumentTypes</th>
				<th>DocumentTypes Used In</th>
			}
		</tr>
	</thead>
	<tbody>
		@foreach (var prop in propsList)
		{
			counter++;
			<tr>
				@*  // #*@
				<td>@counter</td>

				@*//Property Name*@
				<td>@prop.UmbPropertyType.Name</td>

				@*//Property Alias*@
				<td>@prop.UmbPropertyType.Alias</td>

				@*//Composition*@
				<td>@prop.InComposition</td>

				@*//Group*@
				<td>@prop.GroupName</td>

				@*//DataType Name*@
				<td>@prop.DataType.Name</td>

				@*//DataType Property Editor*@
				<td>@prop.DataType.EditorAlias</td>

				@*//DataType Database Type*@
				<td>@prop.DataType.DatabaseType</td>

				@if (!isFilteredByDoctype)
				{
					@*//Qty of DocumentTypes*@
					<td>@prop.AllDocTypes.Count()</td>

					@*//DocumentTypes Used In*@
					<td>
						<ul>
							@foreach (var docType in prop.AllDocTypes)
							{
								<li>
									@docType.DocTypeAlias
									<small>
										@{
											Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/RazorViews/DataFormats/SchemaActions.cshtml", docType.Id,
											new ViewDataDictionary(ViewData)
											{
												{ "EntityType", "DocType" },
												{ "LinkTitle", $"[Edit]" }
											});
										}
									</small>
								</li>
							}
						</ul>
					</td>
				}
			</tr>
		}

	</tbody>
	<tfoot>
		<tr>
			<td>#</td>
			<th>Property Name</th>
			<th>Property Alias</th>
			<th>Composition</th>
			<th>Group</th>
			<th>DataType Name</th>
			<th>DataType Property Editor</th>
			<th>DataType Database Type</th>
			@if (!isFilteredByDoctype)
			{
				<th>Qty of DocumentTypes</th>
				<th>DocumentTypes Used In</th>
			}
		</tr>
	</tfoot>
</table>
